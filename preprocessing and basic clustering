# Step 1: Import the necessary libraries
import pandas as pd
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
import warnings
warnings.filterwarnings("ignore")

# Step 2: Load the customer data
import io
df = pd.read_csv('mall_customers.csv')
df.head()
# Step 3: Prepare the data for clustering
x=df[['customer_id','age']]
scaler=StandardScaler()
x_scaled=scaler.fit_transform(x)
# Determine the optimal number of clusters
wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=0)
    kmeans.fit(x_scaled)
    wcss.append(kmeans.inertia_)
plt.plot(range(1, 11), wcss)
plt.title('K-Means')
plt.xlabel('Gender')
plt.ylabel('Age')
plt.show()

# Apply the k-means algorithm with k=3
kmeans = KMeans(n_clusters=3, init='k-means++', random_state=0)
y_kmeans=kmeans.fit_predict(x_scaled)

plt.scatter(x_scaled[y_kmeans==0,0],x_scaled[y_kmeans==0,1],s=100,c='r',label='cluster1')
plt.scatter(x_scaled[y_kmeans==1,0],x_scaled[y_kmeans==1,1],s=100,c='y',label='cluster2')
plt.scatter(x_scaled[y_kmeans==2,0],x_scaled[y_kmeans==2,1],s=100,c='g',label='cluster3')
plt.title('Customer Segmentation')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.legend()
plt.show()
# Analyze the results
df['Cluster'] = kmeans.labels_
print(df.groupby('Cluster').mean())
